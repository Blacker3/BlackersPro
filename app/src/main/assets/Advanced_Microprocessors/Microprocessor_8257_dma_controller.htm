<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>Microprocessor 8257 DMA Controller</title>
<meta name="description" content="Microprocessor 8257 DMA Controller - Learn Microprocessor in simple and easy steps starting from basic to advanced concepts with examples including Overview, Classification, 8085 Architecture, 8085 Pin Configuration, 8085 Addressing Modes and Interrupts, 8085 Instruction Sets, 8086 Overview, 8086 Functional Units, 8086 Pin Configuration, 8086 Instruction Sets, 8086 Interrupts, 8086 Addressing Modes, Multiprocessor Configuration Overview, 8087 Numeric Data Processor, I/O Interfacing Overview, 8279 Programmable Keyboard, 8257 DMA Controller, Microcontrollers Overview, 8051 Architecture, 8051 Pin Description, 8051 Input Output Ports, 8051 Interrupts, Intel 8255A Programmable Peripheral Interface, Intel 8255A Pin Description, Intel 8253 Programmable Interval Timer, Intel 8253/54 Operational Modes.">
<meta name="keywords" content="Microprocessor, Overview, Classification, 8085 Architecture, 8085 Pin Configuration, 8085 Addressing Modes and Interrupts, 8085 Instruction Sets, 8086 Overview, 8086 Functional Units, 8086 Pin Configuration, 8086 Instruction Sets, 8086 Interrupts, 8086 Addressing Modes, Multiprocessor Configuration Overview, 8087 Numeric Data Processor, I/O Interfacing Overview, 8279 Programmable Keyboard, 8257 DMA Controller, Microcontrollers Overview, 8051 Architecture, 8051 Pin Description, 8051 Input Output Ports, 8051 Interrupts, Intel 8255A Programmable Peripheral Interface, Intel 8255A Pin Description, Intel 8253 Programmable Interval Timer, Intel 8253/54 Operational Modes.">

<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="website">
<meta property="fb:app_id" content="471319149685276">
<meta property="og:site_name" content="www.tutorialspoint.com">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">

<script type="text/javascript" src="js\script-min-v4.js"></script>
<link rel="stylesheet" href="css\style-min.css">
<script async='async' src='js\gpt.js'></script>
<script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script>
<script>
googletag.cmd.push(function() {
    googletag.defineSlot('/60931893/tutorial_right_bottom', [[300, 250], [300, 600]], 'div-gpt-ad-1510138782906-0').addService(googletag.pubads());
    googletag.defineSlot('/60931893/tutorial_right_middle', [[300, 250], [300, 600]], 'div-gpt-ad-1510138782906-1').addService(googletag.pubads());
    googletag.defineSlot('/60931893/tutorial_right_top', [300, 250], 'div-gpt-ad-1510138782906-2').addService(googletag.pubads());
    googletag.defineSlot('/60931893/tutorial_bottom_leader_board', [[600, 400], [300, 250], [480, 320], [468, 60], [336, 280], [600, 200], [580, 400]], 'div-gpt-ad-1510138782906-3').addService(googletag.pubads());
    googletag.pubads().enableSingleRequest();
    googletag.enableServices();
});
function openNav() {	
  document.getElementById("mySidenav").style.width = "250px";
  document.getElementById("right_obs").style.display = "block";
}
function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
function close_obs_sidenav(){
  document.getElementById("mySidenav").style.width = "0";
  document.getElementById("right_obs").style.display = "none";
}
</script>
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
.btnsbmt{ background: #ae2929 !important;}
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #ae2929 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #ae2929 !important;}
.submenu-item{ border-bottom: 2px solid #ae2929 !important; border-top: 2px solid #ae2929 !important }
.ace_scroller{overflow: auto!important;}
a.demo{font-family: "Open Sans",Arial,sans-serif; background:#ae2929; color:#fff; font-size:13px; padding:3px 10px; border:1px solid #d6d6d6; position:absolute; right:5px; margin:-6px 17px 0px 0px;}
a.demo:hover{opacity:.8}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>

<hr>
<p>DMA stands for Direct Memory Access. It is designed by Intel to transfer data at the fastest rate. It allows the device to transfer the data directly to/from memory without any interference of the CPU.</p>
<p>Using a DMA controller, the device requests the CPU to hold its data, address and control bus, so the device is free to transfer data directly to/from the memory. The DMA data transfer is initiated only after receiving HLDA signal from the CPU.</p>
<h2>How DMA Operations are Performed?</h2>
<p>Following is the sequence of operations performed by a DMA &minus;</p>
<ul class="list">
<li><p>Initially, when any device has to send data between the device and the memory, the device has to send DMA request (DRQ) to DMA controller.</p></li>
<li><p>The DMA controller sends Hold request (HRQ) to the CPU and waits for the CPU to assert the HLDA.</p></li>
<li><p>Then the microprocessor tri-states all the data bus, address bus, and control bus. The CPU leaves the control over bus and acknowledges the HOLD request through HLDA signal.</p></li>
<li><p>Now the CPU is in HOLD state and the DMA controller has to manage the operations over buses between the CPU, memory, and I/O devices.</p></li> 
</ul>
<h2>Features of 8257</h2>
<p>Here is a list of some of the prominent features of 8257 &minus;</p>
<ul class="list">
<li><p>It has four channels which can be used over four I/O devices.</p></li>
<li><p>Each channel has 16-bit address and 14-bit counter.</p></li>
<li><p>Each channel can transfer data up to 64kb.</p></li>
<li><p>Each channel can be programmed independently.</p></li>
<li><p>Each channel can perform read transfer, write transfer and verify transfer operations.</p></li>
<li><p>It generates MARK signal to the peripheral device that 128 bytes have been transferred.</p></li>
<li><p>It requires a single phase clock.</p></li>
<li><p>Its frequency ranges from 250Hz to 3MHz.</p></li>
<li><p>It operates in 2 modes, i.e., <b>Master mode</b> and <b>Slave mode</b>.</p></li> 
</ul>
<h2>8257 Architecture</h2>
<p>The following image shows the architecture of 8257 &minus;</p>
<img src="image\8257_architecture.jpg" alt="8257 Architecture">
<h3>8257 Pin Description</h3>
<p>The following image shows the pin diagram of a 8257 DMA controller &minus;</p>
<img src="image\8257_pin_diagram.jpg" alt="8257 Pin Diagram">
<h3>DRQ<sub>0</sub>−DRQ<b>3</b></h3>
<p>These are the four individual channel DMA request inputs, which are used by the peripheral devices for using DMA services. When the fixed priority mode is selected, then DRQ<sub>0</sub> has the highest priority and DRQ<sub>3</sub> has the lowest priority among them.</p>
<h3>DACK<sub>o</sub> − DACK<sub>3</sub></h3>
<p>These are the active-low DMA acknowledge lines, which updates the requesting peripheral about the status of their request by the CPU. These lines can also act as strobe lines for the requesting devices.</p>
<h3>D<sub>o</sub> − D<sub>7</sub></h3>
<p>These are bidirectional, data lines which are used to interface the system bus with the internal data bus of DMA controller. In the Slave mode, it carries command words to 8257 and status word from 8257. In the master mode, these lines are used to send higher byte of the generated address to the latch. This address is further latched using ADSTB signal.</p>
<h3>IOR</h3>
<p>It is an active-low bidirectional tri-state input line, which is used by the CPU to read internal registers of 8257 in the Slave mode. In the master mode, it is used to read data from the peripheral devices during a memory write cycle.</p>
<h3>IOW</h3>
<p>It is an active low bi-direction tri-state line, which is used to load the contents of the data bus to the 8-bit mode register or upper/lower byte of a 16-bit DMA address register or terminal count register. In the master mode, it is used to load the data to the peripheral devices during DMA memory read cycle.</p>
<h3>CLK</h3>
<p>It is a clock frequency signal which is required for the internal operation of 8257.</p>
<h3>RESET</h3>
<p>This signal is used to RESET the DMA controller by disabling all the DMA channels.</p>
<h3>A<sub>o</sub> - A<sub>3</sub></h3>
<p>These are the four least significant address lines. In the slave mode, they act as an input, which selects one of the registers to be read or written. In the master mode, they are the four least significant memory address output lines generated by 8257.</p>
<h3>CS</h3>
<p>It is an active-low chip select line. In the Slave mode, it enables the read/write operations to/from 8257. In the master mode, it disables the read/write operations to/from 8257.</p>
<h3>A<sub>4</sub> - A<sub>7</sub></h3>
<p>These are the higher nibble of the lower byte address generated by DMA in the master mode.</p>
<h3>READY</h3>
<p>It is an active-high asynchronous input signal, which makes DMA ready by inserting wait states.</p>
<h3>HRQ</h3>
<p>This signal is used to receive the hold request signal from the output device. In the slave mode, it is connected with a DRQ input line 8257. In Master mode, it is connected with HOLD input of the CPU.</p>
<h3>HLDA</h3>
<p>It is the hold acknowledgement signal which indicates the DMA controller that the bus has been granted to the requesting peripheral by the CPU when it is set to 1.</p>
<h3>MEMR</h3>
<p>It is the low memory read signal, which is used to read the data from the addressed memory locations during DMA read cycles.</p>
<h3>MEMW</h3>
<p>It is the active-low three state signal which is used to write the data to the addressed memory location during DMA write operation.</p>
<h3>ADST</h3>
<p>This signal is used to convert the higher byte of the memory address generated by the DMA controller into the latches.</p>
<h3>AEN</h3>
<p>This signal is used to disable the address bus/data bus.</p>
<h3>TC</h3>
<p>It stands for ‘Terminal Count’, which indicates the present DMA cycle to the present peripheral devices.</p>
<h3>MARK</h3>
<p>The mark will be activated after each 128 cycles or integral multiples of it from the beginning. It indicates the current DMA cycle is the 128th cycle since the previous MARK output to the selected peripheral device.</p>
<h3>V<sub>cc</sub></h3>
<p>It is the power signal which is required for the operation of the circuit.</p>
<hr>
<br><br>
</html>

